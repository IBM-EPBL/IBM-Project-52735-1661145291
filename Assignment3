{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"mount_file_id":"1u4S28dJaEgDClS_WkV801xecz8WlVC08","authorship_tag":"ABX9TyNnPDYjFOZWt8DbmGjZ2gkD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["2.Image Augmentation"],"metadata":{"id":"YKhDYe4GTKVb"}},{"cell_type":"markdown","source":["3.Createmodel"],"metadata":{"id":"ChF6-rOtSj6C"}},{"cell_type":"code","source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator"],"metadata":{"id":"VG-B8LaqSrJq","executionInfo":{"status":"ok","timestamp":1665805548892,"user_tz":420,"elapsed":3637,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["train_datagen = ImageDataGenerator(rescale=1./255,\n","                                   zoom_range=0.2,\n","                                   horizontal_flip=True)"],"metadata":{"id":"Et5fU2arYj_b","executionInfo":{"status":"ok","timestamp":1665805552535,"user_tz":420,"elapsed":10,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["test_datagen = ImageDataGenerator(rescale=1./255)"],"metadata":{"id":"b_itb5yXZw5z","executionInfo":{"status":"ok","timestamp":1665805555959,"user_tz":420,"elapsed":674,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["xtrain = train_datagen.flow_from_directory('/content/drive/MyDrive/flower')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"52_o6pLnadV7","executionInfo":{"status":"ok","timestamp":1665805564373,"user_tz":420,"elapsed":5295,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"3db92782-5f60-4be8-f2c3-78c5fa53e462"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2603 images belonging to 3 classes.\n"]}]},{"cell_type":"code","source":["xtest = train_datagen.flow_from_directory('/content/drive/MyDrive/flower')"],"metadata":{"id":"ZvKFR6DBVQsP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665805575132,"user_tz":420,"elapsed":559,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"fe9deb55-6be0-4188-da18-82c66cd2ba64"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 2603 images belonging to 3 classes.\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Convolution2D,MaxPooling2D,Flatten,Dense"],"metadata":{"id":"lGN4qhsyhWLj","executionInfo":{"status":"ok","timestamp":1665806509072,"user_tz":420,"elapsed":561,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","source":["4.Add Layers"],"metadata":{"id":"ELl5U0NHlLK5"}},{"cell_type":"code","source":["model = Sequential()\n","model.add(Convolution2D(32,(3,3),activation='relu',input_shape=(64,64,3)))\n","model.add(MaxPooling2D(pool_size=(2,2)))\n","model.add(Flatten())\n","model.add(Dense (300,activation='relu'))\n","model.add(Dense (150,activation='relu'))\n","model.add(Dense (4,activation='softmax'))"],"metadata":{"id":"jku4oJ2ClQ9s","executionInfo":{"status":"ok","timestamp":1665806513480,"user_tz":420,"elapsed":15,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["5.Compiler the model"],"metadata":{"id":"fhvvoCBXrv26"}},{"cell_type":"code","source":["model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])"],"metadata":{"id":"JHTtWYGYr10q","executionInfo":{"status":"ok","timestamp":1665806551744,"user_tz":420,"elapsed":1221,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["Fit the model"],"metadata":{"id":"guG61a8ytZ8J"}},{"cell_type":"code","source":["from keras.callbacks import EarlyStopping,ReduceLROnPlateau"],"metadata":{"id":"DdmDzpfztmFW","executionInfo":{"status":"ok","timestamp":1665806562098,"user_tz":420,"elapsed":18,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["early_stopping=EarlyStopping(monitor='val_accuracy',\n","                             patience=5)\n","reduce_lr=ReduceLROnPlateau(monitor='val_accuracy',\n","                            patience=5,\n","                            fector=0,min_lr=0.00001)\n","callback=[reduce_lr,early_stopping]"],"metadata":{"id":"xFfv-WGYuR-G","executionInfo":{"status":"ok","timestamp":1665806568810,"user_tz":420,"elapsed":842,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["model.fit_generator(xtrain,\n","                    steps_per_epoch=len(xtrain),\n","                    epochs=10,\n","                    validation_data=xtest,\n","                    validation_steps=len(xtest))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"vua7VFwevcz6","executionInfo":{"status":"error","timestamp":1665807584246,"user_tz":420,"elapsed":21478,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"cbef3f54-cb84-4f3e-b226-dd2889433ad8"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  \"\"\"\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n"]},{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-38-d142fa47445a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m                     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxtest\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m                     validation_steps=len(xtest))\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, validation_freq, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   2272\u001b[0m         \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2273\u001b[0m         \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2274\u001b[0;31m         initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   2275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2276\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mdoc_controls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_not_generate_docs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 55\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: Graph execution error:\n\nDetected at node 'sequential_5/flatten_4/Reshape' defined at (most recent call last):\n    File \"/usr/lib/python3.7/runpy.py\", line 193, in _run_module_as_main\n      \"__main__\", mod_spec)\n    File \"/usr/lib/python3.7/runpy.py\", line 85, in _run_code\n      exec(code, run_globals)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py\", line 16, in <module>\n      app.launch_new_instance()\n    File \"/usr/local/lib/python3.7/dist-packages/traitlets/config/application.py\", line 846, in launch_instance\n      app.start()\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelapp.py\", line 612, in start\n      self.io_loop.start()\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/platform/asyncio.py\", line 132, in start\n      self.asyncio_loop.run_forever()\n    File \"/usr/lib/python3.7/asyncio/base_events.py\", line 541, in run_forever\n      self._run_once()\n    File \"/usr/lib/python3.7/asyncio/base_events.py\", line 1786, in _run_once\n      handle._run()\n    File \"/usr/lib/python3.7/asyncio/events.py\", line 88, in _run\n      self._context.run(self._callback, *self._args)\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/ioloop.py\", line 758, in _run_callback\n      ret = callback()\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/stack_context.py\", line 300, in null_wrapper\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 1233, in inner\n      self.run()\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 1147, in run\n      yielded = self.gen.send(value)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 365, in process_one\n      yield gen.maybe_future(dispatch(*args))\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 326, in wrapper\n      yielded = next(result)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 268, in dispatch_shell\n      yield gen.maybe_future(handler(stream, idents, msg))\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 326, in wrapper\n      yielded = next(result)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/kernelbase.py\", line 545, in execute_request\n      user_expressions, allow_stdin,\n    File \"/usr/local/lib/python3.7/dist-packages/tornado/gen.py\", line 326, in wrapper\n      yielded = next(result)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/ipkernel.py\", line 306, in do_execute\n      res = shell.run_cell(code, store_history=store_history, silent=silent)\n    File \"/usr/local/lib/python3.7/dist-packages/ipykernel/zmqshell.py\", line 536, in run_cell\n      return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2855, in run_cell\n      raw_cell, store_history, silent, shell_futures)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 2881, in _run_cell\n      return runner(coro)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/async_helpers.py\", line 68, in _pseudo_sync_runner\n      coro.send(None)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 3058, in run_cell_async\n      interactivity=interactivity, compiler=compiler, result=result)\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 3249, in run_ast_nodes\n      if (await self.run_code(code, result,  async_=asy)):\n    File \"/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py\", line 3326, in run_code\n      exec(code_obj, self.user_global_ns, self.user_ns)\n    File \"<ipython-input-19-d142fa47445a>\", line 5, in <module>\n      validation_steps=len(xtest))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 2274, in fit_generator\n      initial_epoch=initial_epoch)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1409, in fit\n      tmp_logs = self.train_function(iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1051, in train_function\n      return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1040, in step_function\n      outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1030, in run_step\n      outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 889, in train_step\n      y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 490, in __call__\n      return super().__call__(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/base_layer.py\", line 1014, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 92, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/sequential.py\", line 374, in call\n      return super(Sequential, self).call(inputs, training=training, mask=mask)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py\", line 459, in call\n      inputs, training=training, mask=mask)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/functional.py\", line 596, in _run_internal_graph\n      outputs = node.layer(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 64, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/base_layer.py\", line 1014, in __call__\n      outputs = call_fn(inputs, *args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 92, in error_handler\n      return fn(*args, **kwargs)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/layers/reshaping/flatten.py\", line 98, in call\n      return tf.reshape(inputs, flattened_shape)\nNode: 'sequential_5/flatten_4/Reshape'\nInput to reshape is a tensor with 16516096 values, but the requested shape requires a multiple of 30752\n\t [[{{node sequential_5/flatten_4/Reshape}}]] [Op:__inference_train_function_959]"]}]},{"cell_type":"markdown","source":["7.Save the model"],"metadata":{"id":"MYYa6Rhnxrqd"}},{"cell_type":"code","source":["model.save('flower.h5')"],"metadata":{"id":"rshSMZ8cxv49","executionInfo":{"status":"ok","timestamp":1665806772097,"user_tz":420,"elapsed":959,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["8.Test the model"],"metadata":{"id":"dgNAjLj1zWNY"}},{"cell_type":"code","source":["import numpy as np\n","from tensorflow.keras.preprocessing import image"],"metadata":{"id":"NfAfJeoezcmG","executionInfo":{"status":"ok","timestamp":1665806733685,"user_tz":420,"elapsed":10,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["img=image.load_img('/content/drive/MyDrive/flower/daisy/10172379554_b296050f82_n.jpg',target_size=(64,64))\n","x=image.img_to_array(img)\n","x=np.expand_dims(x,axis=0)\n","pred=np.argmax(model.predict(x))\n","op=['daisy','dandelion','rose']\n","op[pred]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"id":"hNZHE5Zl98nQ","executionInfo":{"status":"ok","timestamp":1665806989381,"user_tz":420,"elapsed":1364,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"bfcecc98-4a59-4d7d-db42-0cb78a74f530"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 80ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["'rose'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}]},{"cell_type":"markdown","source":["'rose'"],"metadata":{"id":"A5Ob_crx_L6c"}},{"cell_type":"code","source":["img"],"metadata":{"id":"OY0Rbd5t_QYd","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1665806996234,"user_tz":420,"elapsed":28,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"b7426ed4-74c7-4697-fa36-10f291947613"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=64x64 at 0x7FCC2C7EBCD0>"],"image/png":"\n"},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["img=image.load_img('/content/drive/MyDrive/flower/rose/10090824183_d02c613f10_m.jpg',target_size(64,64))\n","x=image.img_to_array(img)\n","x=np.expand_dims(x,axis=0)\n","pred=np.argmax(model.predict(x))\n","op=['daisy','dandelion','rose']\n","op[pred]"],"metadata":{"id":"c8q3_u7U_iXZ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["'daisy'"],"metadata":{"id":"4I93LLKBABfu"}},{"cell_type":"code","source":["img"],"metadata":{"id":"9_nXsbrRAFR3","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1665807398500,"user_tz":420,"elapsed":777,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"afffa6b2-2aa5-4836-9a45-7a1c00fd823a"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=64x64 at 0x7FCC2C668D10>"],"image/png":"\n"},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":[],"metadata":{"id":"Mk4-X8gfALr2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["img=image.load_img('/content/drive/MyDrive/flower/daisy/10172567486_2748826a8b.jpg',target_size=(64,64))\n","x=image.img_to_array(img)\n","x=np.expand_dims(x,axis=0)\n","pred=np.argmax(model.predict(x))\n","op=['daisy','dandelion','rose']\n","op[pred]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":53},"executionInfo":{"status":"ok","timestamp":1665807362450,"user_tz":420,"elapsed":778,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"9ed45820-1747-4510-abd1-81a03f1922da","id":"SS2UpwSBAM4_"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 26ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["'daisy'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["'dendelion'"],"metadata":{"id":"N1FBRo_cAR7Y"}},{"cell_type":"code","source":["img"],"metadata":{"id":"9pIA37dbAXD4","colab":{"base_uri":"https://localhost:8080/","height":81},"executionInfo":{"status":"ok","timestamp":1665807381360,"user_tz":420,"elapsed":918,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"f6c2d36c-4a95-4c3c-a9e2-8f251167ebba"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGB size=64x64 at 0x7FCC2C668D10>"],"image/png":"\n"},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["x = image.img_to_array(img)\n","x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n7UWjptnAbqk","executionInfo":{"status":"ok","timestamp":1665807446924,"user_tz":420,"elapsed":1591,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"518816f3-3496-4cc0-c954-083d61722653"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[ 27.,  17.,  80.],\n","        [ 25.,  16.,  79.],\n","        [ 25.,  15.,  78.],\n","        ...,\n","        [121., 163., 179.],\n","        [ 61.,  66., 134.],\n","        [ 70.,  53.,  98.]],\n","\n","       [[ 26.,  16.,  76.],\n","        [ 26.,  16.,  77.],\n","        [ 27.,  17.,  78.],\n","        ...,\n","        [ 78.,  74., 124.],\n","        [ 43.,  33., 102.],\n","        [ 63.,  45.,  95.]],\n","\n","       [[ 26.,  17.,  74.],\n","        [ 28.,  18.,  78.],\n","        [ 30.,  20.,  81.],\n","        ...,\n","        [ 43.,  29.,  78.],\n","        [ 50.,  38., 102.],\n","        [ 68.,  53.,  84.]],\n","\n","       ...,\n","\n","       [[ 12.,   7.,  30.],\n","        [ 13.,   9.,  34.],\n","        [ 53.,  39.,  92.],\n","        ...,\n","        [ 24.,  19.,  51.],\n","        [ 22.,  12.,  47.],\n","        [ 18.,  12.,  48.]],\n","\n","       [[ 13.,   7.,  35.],\n","        [ 54.,  30.,  88.],\n","        [ 79.,  59., 110.],\n","        ...,\n","        [ 26.,  14.,  52.],\n","        [ 23.,  11.,  47.],\n","        [ 34.,  24.,  59.]],\n","\n","       [[ 51.,  30.,  87.],\n","        [ 77.,  58., 114.],\n","        [ 79.,  63., 108.],\n","        ...,\n","        [ 23.,  11.,  49.],\n","        [ 25.,  13.,  49.],\n","        [ 27.,  13.,  48.]]], dtype=float32)"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["x = np.expand_dims(x,axis=0)\n","x"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"68kxMZaoBOMW","executionInfo":{"status":"ok","timestamp":1665807466809,"user_tz":420,"elapsed":1582,"user":{"displayName":"Vishali.N","userId":"12083926127349488712"}},"outputId":"aeb0362f-30d1-4f8a-ec90-e14ec8802559"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[[ 27.,  17.,  80.],\n","         [ 25.,  16.,  79.],\n","         [ 25.,  15.,  78.],\n","         ...,\n","         [121., 163., 179.],\n","         [ 61.,  66., 134.],\n","         [ 70.,  53.,  98.]],\n","\n","        [[ 26.,  16.,  76.],\n","         [ 26.,  16.,  77.],\n","         [ 27.,  17.,  78.],\n","         ...,\n","         [ 78.,  74., 124.],\n","         [ 43.,  33., 102.],\n","         [ 63.,  45.,  95.]],\n","\n","        [[ 26.,  17.,  74.],\n","         [ 28.,  18.,  78.],\n","         [ 30.,  20.,  81.],\n","         ...,\n","         [ 43.,  29.,  78.],\n","         [ 50.,  38., 102.],\n","         [ 68.,  53.,  84.]],\n","\n","        ...,\n","\n","        [[ 12.,   7.,  30.],\n","         [ 13.,   9.,  34.],\n","         [ 53.,  39.,  92.],\n","         ...,\n","         [ 24.,  19.,  51.],\n","         [ 22.,  12.,  47.],\n","         [ 18.,  12.,  48.]],\n","\n","        [[ 13.,   7.,  35.],\n","         [ 54.,  30.,  88.],\n","         [ 79.,  59., 110.],\n","         ...,\n","         [ 26.,  14.,  52.],\n","         [ 23.,  11.,  47.],\n","         [ 34.,  24.,  59.]],\n","\n","        [[ 51.,  30.,  87.],\n","         [ 77.,  58., 114.],\n","         [ 79.,  63., 108.],\n","         ...,\n","         [ 23.,  11.,  49.],\n","         [ 25.,  13.,  49.],\n","         [ 27.,  13.,  48.]]]], dtype=float32)"]},"metadata":{},"execution_count":37}]}]}